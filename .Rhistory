predict(lm(y~xmat[1,]-1))
xmat
y
yhat<-predict(lm(y~xmat-1))
co<-lm(y~xmat-1)
co
co$coefficients
co
summary(co)
library(MASS)
shuttle
head(shuttle)
shuttle$use1<- shuttle$use=="auto"
head(shuttle)
shuttle$use1<- as.numeric(shuttle$use=="auto")
head(shuttle)
shuttle$wind1<- as.factor(shuttle$wind=="head")
head(shuttle)
shuttle$wind1<- as.numeric(shuttle$wind=="head")
head(shuttle)
glm(shuttle$use1 ~ shuttle$wind1, family="binomial")
cc<-glm(shuttle$use1 ~ shuttle$wind1, family="binomial")
exp(cc$coefficients)
head(shuttle)
?glm
level(shuttle$magn)
levels(shuttle$magn)
shuttle$magn1 <- as.factor(shttle$magn)
shuttle$magn1 <- as.factor(shuttle$magn)
head(shuttle)
cc2<-glm(shuttle$magn1 ~ shuttle$wind1, family="binomial")
cc2
exp(cc2$coefficients)
levels(shuttle$wind)
levels(shuttle$auto)
head(shuttle)
levels(shuttle$use)
levels(shuttle$magn])
levels(shuttle$magn)
levels(shuttle$magn1)
factor(shuttle$magn,levels=c(1,2,3,4))
factor(shuttle$magn,levels=c(1,2,3,4))
levels(shuttle$magn1)
library(dplyr)
mutate(shuttle$magn1=factor(shuttle$magn,levels=c(1,2,3,4)))
mutate(shuttle$magn1=factor(shuttle$magn,levels=c(1,2,3,4)))
mutate(data=shuttle, magn1=factor(magn,levels=c(1,2,3,4)))
mutate(dataset=shuttle, magn1=factor(magn,levels=c(1,2,3,4)))
?mutate
mutate(shuttle, magn1=factor(magn,levels=c(1,2,3,4)))
shuttle$magn1 <- as.numeric(shttle$magn)
shuttle$magn1 <- as.numeric(shuttle$magn)
head(shuttle)
cc2<-glm(shuttle$magn1 ~ shuttle$wind1, family="binomial")
?glm
cc<-glm(shuttle$use1 ~ shuttle$wind1, family="binomial")
exp(cc$coefficients)
cc<-glm(shuttle$use1 ~ shuttle$wind1-1, family="binomial")
exp(cc$coefficients)
summary(cc)
summary(cc)$coef
cc2<-glm(shuttle$use1 ~ shuttle$wind1+shuttle$magn1, family="binomial")
exp(cc2$coefficients)
cc<-glm(shuttle$use1 ~ shuttle$wind1, family="binomial")
exp(cc$coefficients)
?InsectSprays
head(InsectSprays)
levels(InsectSprays$spray)
a<-gml(InsectSprays$count ~ InsectSprays$spray, family=poisson())
a<-glm(InsectSprays$count ~ InsectSprays$spray, family=poisson())
a
a<-glm(InsectSprays$count ~ InsectSprays$spray, family=poisson())
exp(a$coefficients)
1/1.0574713
a<-glm(InsectSprays$count ~ InsectSprays$spray, family=poisson
a<-glm(InsectSprays$count ~ InsectSprays$spray, family=poisson
a<-glm(InsectSprays$count ~ InsectSprays$spray, family=poisson)
exp(a$coefficients)
a<-glm(InsectSprays$count ~ InsectSprays$spray-1, family=poisson
)
exp(a$coefficients)
14.500000/ 15.333333
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
x
len(x)
dim(x)
length(x)
length(y)
k<-c(0)
sp<-sapply(k, function(k) (k>x)*(k-x))
sp<-sapply(k, function(k) (x>k)*(x-k))
sp
xm<-cbind(1,x,sp)
xm
yhat<-predict(lm(y~xm-1))
yhat
lm(y~xm-1)$coef
plot(x,y)
lines(x,yhat)
lm(y~xm-1)
lm(y~xmat-1)
lm(y~xm-1)$coefn <- 500; x <- seq(0, 4 * pi, length = n); y <- sin(x) + rnorm(n, sd = .3)
knots <- seq(0, 8 * pi, length = 20);
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot))
xMat <- cbind(1, x, splineTerms)
n <- 500; x <- seq(0, 4 * pi, length = n); y <- sin(x) + rnorm(n, sd = .3)
knots <- seq(0, 8 * pi, length = 20);
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot))
xMat <- cbind(1, x, splineTerms)
lm(y ~ xMat - 1)
length(lm(y ~ xMat - 1)$coef)
knots
length(knots)
lm(y~xm-1)
length(knots)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
sp<-sapply(k, function(k) (x>k)*(x-k))
xm<-cbind(1,x,sp)
k
lm(y~xm-1)
yhat<-predict(lm(y~xm-1))
yhat
exp(lm(y~x-1)$coef)
lm(y~x-1)
lm(y~xm-1)
x
xm
y
lm(y~xm-1)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.016, 2, 4.05, 5, 7.7, 10)
lm(y~xm-1)
yhat<-predict(lm(y~xm-1))
plot(x,y)
lines(x,yhat)
2.0372 -1.0242
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.032, 4, 8.05, 10, 15, 20)
yhat<-predict(lm(y~xm-1))
lm(y~x-1)$coef
sp<-sapply(k, function(k) (x>k)*(x-k))
yhat<-predict(lm(y~xm-1))
plot(x,y)
lines(x,yhat)
lm(y~xm-1)$coef
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
head(vowel.train)
set.seed(33833)
f1<-train(y~., data=vowel.train, method="rf")
f1<-train(y~., data=vowel.train, method="rf")
library(caret)
f1<-train(y~., data=vowel.train, method="rf")
f1<-train(y~., data=vowel.train, method="rf")
f1<-train(y~., data=vowel.train, method="rf", trControl=trainControl(method="cv", number=3))
head(vowel.train)
f2<-train(y~., data=vowel.train,method="gbm")
f2<-train(y~., data=vowel.train,method="gbm")
f2<-train(y~., data=vowel.train, method="gbm")
f2
f1
p1<-predict(f1,vowel.test)
p2<-predict(f2,vowel.test)
p1
p2
summary(p1)
table(p1,testing$y)
table(p1,testing$y)
p1
p2<-predict(f2,vowel.test)
sum((p1-testing$y)^2
)
sum((p1-testing$y))^2
sum((p1-vowel.test$y))^2
sum((p2-vowel.test$y))^2
table(p1,vowel.test$y)
sum((p1-testing$y))^2
sum((p2-vowel.test$y))^2
sum((p1-vowel.test$y))^2
f1<-train(y~., data=vowel.train, method="rf", trControl=trainControl(method="cv", number=5))
p1<-predict(f1,vowel.test)
sum((p1-testing$y))^2
sum((p1-vowel.test$y))^2
sum((p2-testing$y))^2
sum((p2-vowel.test$y))^2
head(vowel.test)
levels(vowel.test$y)
summary(vowel.test$y)
vowel.train$y1<-as.factor(vowel.train)
vowel.train$y1<-factor(vowel.train)
f1<-train(factor(y)~., data=vowel.train, method="rf", trControl=trainControl(method="cv", number=5))
f2<-train(factor(y)~., data=vowel.train, method="gbm")
?train
?gmb
?gbm
f2<-train(factor(y)~., data=vowel.train, method="gbm",verbose="CV")
f2<-train(factor(y)~., data=vowel.train, method="gbm",verbose=FALSE)
p1<-predict(f1,vowel.test)
p2<-predict(f2,vowel.test)
table(p1,vowel.test$y)
sum(diag(table(p1,vowel.test$y)))
sum(diag(table(p2,vowel.test$y)))
sum(diag(table(p2,vowel.test$y)))/sum(table(p1,vowel.test$y))
sum(diag(table(p2,vowel.test$y)))/sum(table(p2,vowel.test$y))
sum(diag(table(p1,vowel.test$y)))/sum(table(p1,vowel.test$y))
p1
p1-p2
summary(p1-p2)
p1==p2
summary(p1==p2)
316/(316+146())
316/(316+146
)
summary(p1==vowel.test$y)
summary(p2==vowel.test$y)
239/(239+223)
276/(239+223)
316/(316+146
)
table(p1,p2)
sum(diag(table(p1,p2))/sum(table(p1,p2))
)
m1<-p1==vowel.test$y
m2<-p2==vowel.test$y
m1
m2
which(m1)
which(m1)==which(m2)
summary(which(m1)==which(m2))
which(m1)
diff(which(m1),which(m2))
df(which(m1),which(m2))
m1
a1<-which(m1)
a2<-which(m2)
a1
a2
diff(a1,a2)
diff(list(a1),list(a2)
)
m<-c(1,2)
x<-c(2,3)
diff(x,m)
df(x,m)
intersect(which(m1),which(m2))
length(intersect(which(m1),which(m2)))
201/(316+146)
201/(186+276
)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
head(training)
mod1<-train(diagnosis~.,data=training, method="rf",trControl=trainControl(method="cv",number=3))
mod2<-train(diagnosis~.,data=training, method="gbm",verbose=FALSE)
mod3<-train(diagnosis~.,data=training, method="lda")
class(diagnosis)
pr1<-predict(mod1,testing)
pr1
pr2<-predict(mod2,testing)
pr3<-predict(mod3,testing)
sum(diag(table(pr1,testing$diagnosis)))/sum(table(pr1,testing$diagnosis))
sum(diag(table(pr2,testing$diagnosis)))/sum(table(pr2,testing$diagnosis))
sum(diag(table(pr3,testing$diagnosis)))/sum(table(pr3,testing$diagnosis))
prDF<-data.frame(pr1,pr2,pr3,diagnosis=testing$diagnosis)
prDF
combmod<-train(diagnosis~., method="rf",data=prDF,trControl=trainControl(method="cv",number=3))
combpr<-predict(combmod,prDF)
combpr
sum(diag(table(combpr,testing$diagnosis)))/sum(table(combpr,testing$diagnosis))
sum(diag(table(pr2,testing$diagnosis)))/sum(table(pr2,testing$diagnosis))
sum(diag(table(pr3,testing$diagnosis)))/sum(table(pr3,testing$diagnosis))
sum(diag(table(pr1,testing$diagnosis)))/sum(table(pr1,testing$diagnosis))
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(223)
set.seed(233)
fit <- train(CompressiveStrength ~ ., training, method="lasso")
fit <- train(CompressiveStrength ~ ., training, method="lasso")
fit
plot.enet(fit$finalModel, xvar="penalty", use.color=TRUE)
fit
plot.enet(fit$finalModel, xvar="penalty", use.color=TRUE)
fit$finalModel
library(lubridate)  # For year() function below
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(lubridate)  # For year() function below
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(lubridate)  # For year() function below
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
install.packages("lubridate")
library(lubridate)  # For year() function below
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(maniputlate)
library(manipulate)
install.packages("manipulate")
library(maniputlate)
library(manipulate)
manipulate(plot(1:x),x=slider(1,100))
install.packages("devtools")
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot(s), s=slider(0, 2, step = 0.1))
install.packages("rCharts")
library(UsingR)
install.packages("UsingR")
install_github('slidify','ramnathv')
install_github('slidify','ramnathv')
install.packages("install_github")
library(devtools)
install.packages("devtools")
library(devtools)
install.packages("devtools")
library(devtools)
install.packages("git2r")
library(iconv)
install.packages("iconv")
install.packages("devtools")
install.packages("git2r")
library(devtools)
apt-get install libssl-dev/unstable
install.packages("git2r")
install.packages("devtools")
install.packages("git2r")
install.packages("devtools")
install.packages("devtools")
install.packages("cran")
install.packages("CRAN")
library(devtools)
install.packages("devtools", dependencies = TRUE)
library(devtools)
install.packages("devtools")
install.packages("devtools")
install.packages("devtools") --with-openssl
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("git2r")
list.files()
files()
list()
pwd
ls
ls()
list.files()
list.file()
list.files()
install.packages("git2r")
sudo install.packages("git2r")
su
install.packages("git2r", verbose=TRUE)
install.packages("git2r", verbose=TRUE)
install.packages("git2r", verbose=TRUE)
install.packages("git2r", verbose=TRUE)
install.packages("git2r", verbose=TRUE)
install.packages("git3r")
install.packages("gitrr")
install.packages("git2r")
install.packages("git2r")
install.packages("git2r")
updateR()
source("http://bioconductor.org/biocLite.R")
biocLite("BiocUpgrade")
version
install.packages("installr")
setInternet2(TRUE)
installr::updateR()
options(download.file.method = "libcurl")
install.packages("git2r")
update()
?update
?system update
install.packages("git2r")
install.packages("git2r")
OPENSSL_INCLUDES="/usr/local/opt/openssl/include/"
install.packages("git2r")
install.packages("iconv_open")
install.packages("iconv_open")
install.packages("git2r")
open("config.log")
read("config.log")
open("config.log")
install.packages("git2r")
install_github('ramnathv/slidify')
install_github('ramnathv/slidify')
install.packages("git2r")
install.packages("git2r")
install.packages("git2r")
install.packages("git2r")
install.packages("git2r")
install.packages("git2r")
install.packages("git2r")
install.packages("libssh2-1-dev ")
m<-c(1,10,20)
sd(m)
install.packages("install_github")
install_github('ropensci/git2r')
install.packages("installr")
install.packages("install")
install_github("devtools")
install.packages("devtools")
library("devtools")
install.packages("devtools")
install_github('ropensci/git2r')
library(git2r)
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
library(datasets)
dTable(airquality, sPaginationType = "full_numbers")
library(rcharts)
install.packages("rCharts")
install.packages("devtools")
install.packages("Rcpp")
library(devtools)
library(Rcpp)
install_github('ramnathv/rCharts')
d <- function(x) x*2
d
d(2)
d)8
d(89)
x<-c(1,3)
x<-c((1,2),(3,4))
x<-c(1,2;3,4
x<-c(1,2;3,4)
x
x<-numeric(1,2;3,4)
x<-matrix(1,2;3,4)
?"matrix"
x<-matrix(c(1,2,3,4,5,6),nrow=2)
x
cbind(1,x)
setwd("~/Desktop/9.Developing_Data_Products/project/slidify_project/")
library(knitr)
publish(title = 'DevDataProducts', 'index.html', host = 'rpubs')
library(slidify)
publish(title = 'DevDataProducts', 'index.html', host = 'rpubs')
publish(title = 'DevDataProducts', 'index.html', host = 'rpubs')
getwd()
publish(user = "mollihua", repo = "DevelopingDataProducts_project2")
publish(user = "mollihua", repo = "https://github.com/mollihua/DevelopingDataProducts_project2.git")
publish(u repo = "https://github.com/mollihua/DevelopingDataProducts_project2.git")
publish(repo = "https://github.com/mollihua/DevelopingDataProducts_project2.git")
publish(user = "mollihua", repo = "https://github.com/mollihua/DevelopingDataProducts_project2.git")
publish(user = "mollihua", repo = "DevelopingDataProducts_project2.git")
git config --global user.name "mollihua"
publish(user = "mollihua", repo = "DevelopingDataProducts_project2")
publish(title = 'DevDataProducts', 'index.html', host = 'rpubs')
library(datasets)
data(euro)
```{r results='asis',comment=NA,echo=FALSE}
library(rCharts)
library(knitr)
# Get the values
euro1 <- as.data.frame(euro)
# Get the currencies
euro2 <- as.data.frame(names(euro))
# Combine currencies and values
euro3 <- cbind(euro1, euro2)
names(euro3) <- c("Value", "Currency")
n1 <- rPlot(Value~Currency,data=euro3,type='point',size=list(const=3))
n1$set(width = 600, height = 400)
n1$show(cdn = TRUE)
n1$save("figure")
n1$save("figure",w)
n1$save("figure1)
)
""
)
"
n1$save("figure1")
pwd
setwd()
getwd()
setwd("~/Desktop/9.Developing_Data_Products/project/DevelopingDataProducts_project2/")
publish(title = 'DevDataProducts', 'index.html', host = 'rpubs')
publish(title = 'DevDataProducts', 'index.html', host = 'rpubs')
